var documenterSearchIndex = {"docs":
[{"location":"model/dbscan/#DBSCAN","page":"DBSCAN","title":"DBSCAN","text":"","category":"section"},{"location":"model/dbscan/","page":"DBSCAN","title":"DBSCAN","text":"Density-based Spatial Clustering of Applications with Noise (DBSCAN) is a data clustering algorithm that finds clusters through density-based expansion of seed points. The algorithm was proposed in:","category":"page"},{"location":"model/dbscan/","page":"DBSCAN","title":"DBSCAN","text":"Martin Ester, Hans-peter Kriegel, JÃ¶rg S, and Xiaowei Xu A density-based algorithm for discovering clusters in large spatial databases with noise. 1996.","category":"page"},{"location":"model/dbscan/#Interface","page":"DBSCAN","title":"Interface","text":"","category":"section"},{"location":"model/dbscan/","page":"DBSCAN","title":"DBSCAN","text":"The implementation of DBSCAN algorithm provided by Clustering supports the two ways of specifying clustering data:","category":"page"},{"location":"model/dbscan/","page":"DBSCAN","title":"DBSCAN","text":"dbscan_label(tree::AbstractMatrix{<:Real}, radius::Real; min_neighbors::Int64 = 1, min_cluster_size::Int64 = 1) ","category":"page"},{"location":"model/dbscan/#PhyloClustering.dbscan_label-Tuple{AbstractMatrix{<:Real}, Real}","page":"DBSCAN","title":"PhyloClustering.dbscan_label","text":"Function to get predicted labels from density-based spatial clustering of applications with noise.\nInput:\n    tree: a B * N tree Matrix (each column of tree Matrix is a B-dimensional tree in bipartiton format) and B < N\n    radius: neighborhood radius; points within this distance are considered neighbors\n    min_neighbors: minimal number of neighbors required to assign a point to a cluster\n    min_cluster_size: minimal number of points in a cluster\noutput:\n    a Vector object with length of N containing predicted labels for each tree (the cluster it belongs to) \n    0 means the tree is noise\n\n\n\n\n\n","category":"method"},{"location":"model/basic/#Testing","page":"Testing","title":"Testing","text":"","category":"section"},{"location":"model/gmm/","page":"-","title":"-","text":"gmm_label(tree::AbstractMatrix{<:Real}, n::Int64; method::Symbol=:kmeans, kind::Symbol=:diag)","category":"page"},{"location":"model/gmm/#PhyloClustering.gmm_label-Tuple{AbstractMatrix{<:Real}, Int64}","page":"-","title":"PhyloClustering.gmm_label","text":"Function to get predicted labels from Gaussian mixture model.\nInput:\n    tree: a B * N tree Matrix (each column of tree Matrix is a B-dimensional tree in bipartiton format)\n    n: the number of clusters\n    method: intialization method to find n starting centers\n    kind: covariance type\noutput:\n    a vector tuple where the first vector contains predicted labels for each tree based on the posterior probability and\n    the second vector contain predicted labels for each tree based on the Log Likelihood\n\n\n\n\n\n","category":"method"},{"location":"model/hclust/#Hierarchical-Clustering","page":"Hierarchical Clustering","title":"Hierarchical Clustering","text":"","category":"section"},{"location":"model/hclust/","page":"Hierarchical Clustering","title":"Hierarchical Clustering","text":"Hierarchical clustering algorithms build a dendrogram of nested clusters by repeatedly merging or splitting clusters.","category":"page"},{"location":"model/hclust/","page":"Hierarchical Clustering","title":"Hierarchical Clustering","text":"The hclust function implements several classical algorithms for hierarchical clustering (the algorithm to use is defined by the linkage parameter):","category":"page"},{"location":"model/hclust/","page":"Hierarchical Clustering","title":"Hierarchical Clustering","text":"hc_label(matrix::AbstractMatrix{<:Real}, n::Int64; linkage::Symbol=:ward)","category":"page"},{"location":"model/hclust/#PhyloClustering.hc_label-Tuple{AbstractMatrix{<:Real}, Int64}","page":"Hierarchical Clustering","title":"PhyloClustering.hc_label","text":"Function to get predicted labels from hierarchical clustering.\nInput:\n    matrix: a N * N pairwise distance Matrix\n    n: the number of clusters\n    linkage: cluster method to use. It affects what clusters are merged on each iteration.\noutput:\n    a Vector object with length of N containing predicted labels for each tree (the cluster it belongs to)\n\n\n\n\n\n","category":"method"},{"location":"model/hclust/","page":"Hierarchical Clustering","title":"Hierarchical Clustering","text":"Single-linkage clustering using distance matrix:","category":"page"},{"location":"model/hclust/","page":"Hierarchical Clustering","title":"Hierarchical Clustering","text":"","category":"page"},{"location":"model/kmeans/#K-means","page":"K-means","title":"K-means","text":"","category":"section"},{"location":"model/kmeans/","page":"K-means","title":"K-means","text":"K-means is a classical method for clustering or vector quantization. It produces a fixed number of clusters, each associated with a center (also known as a prototype), and each data point is assigned to a cluster with the nearest center.","category":"page"},{"location":"model/kmeans/","page":"K-means","title":"K-means","text":"From a mathematical standpoint, K-means is a coordinate descent algorithm that solves the following optimization problem:","category":"page"},{"location":"model/kmeans/","page":"K-means","title":"K-means","text":"textminimize  sum_i=1^n  mathbfx_i - boldsymbolmu_z_i ^2  textwrt  (boldsymbolmu z)","category":"page"},{"location":"model/kmeans/","page":"K-means","title":"K-means","text":"Here, boldsymbolmu_k is the center of the k-th cluster, and z_i is an index of the cluster for i-th point mathbfx_i.","category":"page"},{"location":"model/kmeans/","page":"K-means","title":"K-means","text":"kmeans_label(tree::AbstractMatrix{<:Real}, n::Int64; init::String=\"k-means++\", rng::AbstractRNG=Random.GLOBAL_RNG)","category":"page"},{"location":"model/kmeans/#PhyloClustering.kmeans_label-Tuple{AbstractMatrix{<:Real}, Int64}","page":"K-means","title":"PhyloClustering.kmeans_label","text":"Function to get predicted labels from Yinyang K-means clustering\nInput:\n    tree: a B * N tree Matrix (each column of tree Matrix is a B-dimensional tree in bipartiton format)\n    n: the number of clusters\n    init: initialization method. K-means++ or rand\n    rng: \noutput:\n    a Vector object with length of N containing predicted labels for each tree\n\n\n\n\n\n","category":"method"},{"location":"model/kmeans/#Examples","page":"K-means","title":"Examples","text":"","category":"section"},{"location":"model/kmeans/","page":"K-means","title":"K-means","text":"","category":"page"},{"location":"#PhyloClustering.jl","page":"Home","title":"PhyloClustering.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PhyloClustering.jl is a Julia package for performing unsupervised learning on phylogenetic trees. The algorithms currently included are K-means, Hierarchical Clustering, Gaussian Mixture Model, and DBSCAN.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use PhyloClustering.jl in your work, we kindly ask that you cite the following paper: ","category":"page"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"CurrentModule = PhyloClustering","category":"page"},{"location":"lib/helper_methods/#Convert-trees-in-Newick-format-to-bipartition-format","page":"Helper Methods","title":"Convert trees in Newick format to bipartition format","text":"","category":"section"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"num_bipartitions(n::Int64)","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.num_bipartitions-Tuple{Int64}","page":"Helper Methods","title":"PhyloClustering.num_bipartitions","text":"Function to get number of bipartitions.\nInput:\n    n: the number of taxa\noutput:\n    the number of bipartition corresponding to the number of taxa\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"show_bipartitions(n::Int64; start::Int64 = 0, stop::Int64=-1)","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.show_bipartitions-Tuple{Int64}","page":"Helper Methods","title":"PhyloClustering.show_bipartitions","text":"Function to show the bipartitions between certain indices of the number of taxa.\nInput:\n    n: the number of taxa\n    start: the starting index\n    stop: the ending index\noutput:\n    the bipartiions of trees with n taxa between start index and stop index\nExample:\nshow_bipartitions(4,stop = 4):\n    idx\tpartition\n    0\t1 | 2 3 4 \n    1\t2 | 1 3 4 \n    2\t3 | 1 2 4 \n    3\t4 | 1 2 3 \n    4\t1 2 | 3 4\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"show_bipartition(n::Int64, idx::Int64)","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.show_bipartition-Tuple{Int64, Int64}","page":"Helper Methods","title":"PhyloClustering.show_bipartition","text":"Function to show the bipartition with a given index of the number of taxa.\nInput:\n    n: the number of taxa\n    idx: the bipartition to show\noutput:\n    the idx-th bipartiion of trees with n taxa\n    Example:\n    show_bipartition(4, 3):\n        idx\tpartition\n        3\t4 | 1 2 3\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"plot_clusters(tree::AbstractMatrix{<:Real}, label::Vector{Int64})","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.plot_clusters-Tuple{AbstractMatrix{<:Real}, Vector{Int64}}","page":"Helper Methods","title":"PhyloClustering.plot_clusters","text":"Function to visualize the result of models.\nInput:\n    tree: a B * N tree Matrix (each column of tree Matrix is a B-dimensional tree in bipartiton format)\n    label: an N-length Vector containing predicted labels for each tree. People can use the output of the models\noutput:\n    a scatter plot showing tree clusters\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"get_bipartition(tree::HybridNetwork, n::Int64)","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.get_bipartition-Tuple{PhyloNetworks.HybridNetwork, Int64}","page":"Helper Methods","title":"PhyloClustering.get_bipartition","text":"Function to get the bipartition format of a phylogenetic tree\nInput:\n    tree: a HybridNetwork object that reperents the tree\n    n: the number of taxa of the tree\noutput:\n    a Vector of pairs shows the tree in bipartiton format\nExample:\n    tree:\n        HybridNetwork, Rooted Network\n        6 edges\n        7 nodes: 4 tips, 0 hybrid nodes, 3 internal tree nodes.\n        tip labels: 4, 1, 2, 3\n        (4:4.249,(1:2.457,(2:2.064,3:2.064):0.393):1.793);\n\n    get_bipartition(tree, 4):\n        6-element Vector{Any}:\n            3 => 4.249\n            0 => 2.457\n            1 => 2.064\n            2 => 2.064\n            6 => 0.393\n            3 => 1.793\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"print_bipartition(trees::Vector{HybridNetwork}, n::Int64)","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.print_bipartition-Tuple{Vector{PhyloNetworks.HybridNetwork}, Int64}","page":"Helper Methods","title":"PhyloClustering.print_bipartition","text":"Function to get the bipartition format of phylogenetic trees in Matrix\nNote that all taxa will be replaced by numbers. Use the function num_to_name to \nget a Dictionary containing the name of the taxon corresponding to the number\nInput:\n    trees: a Vector of HybridNetwork objects that contains trees\n    n: the number of taxa of the trees\noutput:\n    a Matrix shows the tree in bipartiton format\nExample:\n    tree:\n        HybridNetwork, Rooted Network\n        6 edges\n        7 nodes: 4 tips, 0 hybrid nodes, 3 internal tree nodes.\n        tip labels: 4, 1, 2, 3\n        (4:4.249,(1:2.457,(2:2.064,3:2.064):0.393):1.793);\n\n    print_bipartition([tree], 4)\n        1*7 Matrix{Float64}:\n        2.457  2.064  2.064  6.042  0.0  0.0  0.393\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"standardize_tree(tree::AbstractMatrix{<:Real}) ","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.standardize_tree-Tuple{AbstractMatrix{<:Real}}","page":"Helper Methods","title":"PhyloClustering.standardize_tree","text":"Function to standardize tree Matrix.\nInput:\n    tree: a N * B Matrix containing trees (each row is a B-dimensional tree in bipartiton format)\noutput:\n    a standardized B * N tree Matrix with a mean of about 0 and a standard deviation of about 1\n    this tree Matrix can be the input of models\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"num_to_name(tree::HybridNetwork)","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.num_to_name-Tuple{PhyloNetworks.HybridNetwork}","page":"Helper Methods","title":"PhyloClustering.num_to_name","text":"Function to obtain a table that contains taxon numbers and their names \nInput:\n    trees: a HybridNetwork objects that contains trees\noutput:\n    a Dictionary shows taxon numbers and their names\nExample:\n    tree:\n        HybridNetwork, Rooted Network\n        6 edges\n        7 nodes: 4 tips, 0 hybrid nodes, 3 internal tree nodes.\n        tip labels: O, HYB, P1, P2\n        (O:3.866,(HYB:1.593,(P1:1.208,P2:1.208):0.386):2.273);\n\n    print_bipartition([tree], 4)\n        Dict{Int64, Any} with 4 entries:\n        4 => \"P2\"\n        2 => \"O\"\n        3 => \"P1\"\n        1 => \"HYB\"\n\n\n\n\n\n","category":"method"},{"location":"lib/helper_methods/","page":"Helper Methods","title":"Helper Methods","text":"distance(tree::AbstractMatrix{<:Real})","category":"page"},{"location":"lib/helper_methods/#PhyloClustering.distance-Tuple{AbstractMatrix{<:Real}}","page":"Helper Methods","title":"PhyloClustering.distance","text":"Function to get the distance Matrix of a tree Matrix.\nInput:\n    tree: a B * N tree Matrix\noutput:\n    a pairwise distance Matrix that can be the input of hierarchical clustering\n\n\n\n\n\n","category":"method"},{"location":"man/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"man/installation/#Installation-of-Julia","page":"Installation","title":"Installation of Julia","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Julia is a high-level and interactive programming language (like R or Matlab), but it is also high-performance (like C). To install Julia, follow instructions here. For a quick & basic tutorial on Julia, see learn x in y minutes.","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Editors:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Visual Studio Code provides an editor and an integrated development environment (IDE) for Julia: highly recommended!\nYou can also run Julia within a Jupyter notebook (formerly IPython notebook).","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"IMPORTANT: Julia code is just-in-time compiled. This means that the first time you run a function, it will be compiled at that moment. So, please be patient! Future calls to the function will be much much faster. Trying out toy examples for the first calls is a good idea.","category":"page"},{"location":"man/installation/#Installation-of-the-PhyloClustering.jl-package","page":"Installation","title":"Installation of the PhyloClustering.jl package","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"To install the package, type inside Julia:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"]\nadd PhyloClustering","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"The first step can take a few minutes, be patient.","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"The PhyloClustering.jl package has dependencies like Distributions and StatsBase (see the Project.toml file for the full list), but everything is installed automatically.","category":"page"},{"location":"man/installation/#Loading-the-Package","page":"Installation","title":"Loading the Package","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"To check that your installation worked, type this in Julia to load the package. This is something to type every time you start a Julia session:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"using PhyloClustering","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"This step can also take a while, if Julia needs to pre-compile the code (after a package update for instance).","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Press ? inside Julia to switch to help mode,  followed by the name of a function (or type) to get more details about it.","category":"page"}]
}
